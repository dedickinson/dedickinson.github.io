<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Prag-o-matic - agile</title><link href="http://www.duncan.dickinson.name/" rel="alternate"></link><link href="https://www.duncan.dickinson.name/feeds/agile.atom.xml" rel="self"></link><id>http://www.duncan.dickinson.name/</id><updated>2015-03-26T07:53:00+10:00</updated><entry><title>Standing up against stand ups</title><link href="http://www.duncan.dickinson.name/2015/03/standing-up-against-stand-ups.html" rel="alternate"></link><published>2015-03-26T07:53:00+10:00</published><updated>2015-03-26T07:53:00+10:00</updated><author><name>Duncan</name></author><id>tag:www.duncan.dickinson.name,2015-03-26:/2015/03/standing-up-against-stand-ups.html</id><summary type="html">&lt;p&gt;In the first post following on from &lt;a class="reference external" href="http://blog.duncan.dickinson.name/2015/03/thats-not-agile.html"&gt;That’s not agile&lt;/a&gt; I want to look at a practice I find to be one of the most tricky and contentious issues I encounter when discussing Agile, especially with developers: the daily stand up. Many Agile people tell me that these daily …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the first post following on from &lt;a class="reference external" href="http://blog.duncan.dickinson.name/2015/03/thats-not-agile.html"&gt;That’s not agile&lt;/a&gt; I want to look at a practice I find to be one of the most tricky and contentious issues I encounter when discussing Agile, especially with developers: the daily stand up. Many Agile people tell me that these daily sessions are a MUST and you’re not Agile if you’re not doing them. However, these sessions aren’t described in all agile methodologies and, in many cases, you can watch these meetings as if you were an anthropologist and see where the project is not actually agile at all.&lt;/p&gt;
&lt;p&gt;Many agile teams use stand ups (or daily scrums) to ensure that the team is working through the backlog/tasks/stories effectively. Take a look at the list below and see if any/all of these match what you see/experience:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The stand up goes for longer than 15–20 minutes&lt;/li&gt;
&lt;li&gt;The project manager/scrum master/loudest person does all the talking&lt;/li&gt;
&lt;li&gt;Most people are sitting down&lt;/li&gt;
&lt;li&gt;People have their laptops, tablets and mobiles out and are reading off them&lt;/li&gt;
&lt;li&gt;It’s rare that the whole team is there at every stand up&lt;/li&gt;
&lt;li&gt;Someone is pointing at a gantt chart&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Most stand ups I’ve been involved in usually hit 3–4 of those items. In most situations I can tell that the team is needing (crying out for) better communication levels so Item 1 is most common. Of course, if the project team is communicating fluently throughout the day, these daily meetings &lt;strong&gt;may not be required at all&lt;/strong&gt;. In fact, the somewhat artificial nature of the approach can lead to breaks in thought and communication that’s already going on within the team.&lt;/p&gt;
&lt;p&gt;Some project managers have indicated to me that it’s a useful approach if the team is distributed and/or some members are working across projects. In both of these situations I wonder if the structure is actually debilitating and that, instead of stand ups, the project would be better served by bringing the team into the same room and ensuring team members are focussed on one project at a time. The context switching hits in numerous ways - it’s an attention break and sometimes a complete change in direction (especially for the project part-timer).&lt;/p&gt;
&lt;p&gt;Another reason often cited is that developers don’t communicate very well. First up, it’s important to check that assertion before reacting to it as many developers will sit right next to each other and instant message throughout the day. If your criteria for communication is talking out loud perhaps you need to dig a bit deeper. &lt;a class="reference external" href="http://alistair.cockburn.us/Crystal+Clear+distilled"&gt;Crystal Clear&lt;/a&gt; stresses the utility of &lt;a class="reference external" href="http://alistair.cockburn.us/Osmotic+communication"&gt;osmotic communication&lt;/a&gt; and many of us will have seen projects that just hum - people talking, sharing, laughing. Team members are actively problem-solving with each other, grabbing a coffee and discussing a piece of the architecture or drawing all over the whiteboard. Those teams using XP are pair programming and those that aren’t XP’ers may pair program ad-hoc when a tricky problem has come up. Throughout the day there are waves of quiet as people focus and louder times when discussions need to happen.&lt;/p&gt;
&lt;p&gt;My big question here is: when the team is humming, do you really need a stand-up?&lt;/p&gt;
&lt;p&gt;If the team is in the same location and someone completes a story couldn’t they just call out “I’m done with Story X and reckon I’ll pick up Story Y” or if they have a problem is calling out “Story W is killing me - the message queue looks like it’s not &amp;lt;blah&amp;gt; - anyone able to help me for a bit?” not effective? Do they really need a stand up? Doesn’t the PM/scrum master/lead hear this because they’re in the same room anyway?&lt;/p&gt;
&lt;p&gt;I believe the answer is that you don’t need these daily meeting but… in the early stage of a project or with a new team member it might be worth using stand ups to try and kick-start the communication. As always, monitor, reflect and respond to the situation - don’t just do something because you’ve been told “that’s agile”.&lt;/p&gt;
</content><category term="stand up"></category><category term="communication"></category><category term="agile"></category></entry><entry><title>That's not agile</title><link href="http://www.duncan.dickinson.name/2015/03/thats-not-agile.html" rel="alternate"></link><published>2015-03-25T18:35:00+10:00</published><updated>2015-03-25T18:35:00+10:00</updated><author><name>Duncan</name></author><id>tag:www.duncan.dickinson.name,2015-03-25:/2015/03/thats-not-agile.html</id><summary type="html">&lt;p&gt;I often hear “I do agile” and “That’s not agile” and I’m starting to put it into the same bucket as “That’s not an enterprise approach”. Such terms are often used to reassure those that have just heard that “Agile is good” or as a pre-emptive strike …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I often hear “I do agile” and “That’s not agile” and I’m starting to put it into the same bucket as “That’s not an enterprise approach”. Such terms are often used to reassure those that have just heard that “Agile is good” or as a pre-emptive strike against those asking where the documentation is. I’m thinking of a few posts around items that are often labelled as “Not Agile” but perhaps really can be. First, though, I want to dig into the term “Agile” a little.&lt;/p&gt;
&lt;p&gt;The approaches that were swirling around before Agile was something in which you could be certified included ideas such as rapid prototyping, iterative development, use cases and adaptive processes. It seemed that people were tiring of bloated projects that marched on like budget-destroying zombies. Central to many concerns appears to have been the issue of gathering requirements/needs and turning them into software. Do it as two very large blocks and the requirements phase isn’t based in the reality of implementation. Expecting that the users/stakeholders can describe all requirements/needs/goals completely and comprehensively up-front was to ignore the complexity of what is being built and our ability to grasp the context as a whole.&lt;/p&gt;
&lt;p&gt;But let’s go back a little. In August 1970, Dr Winston W Royce started paper in Proceedings, IEEE WESCON with:&lt;/p&gt;
&lt;blockquote&gt;
I am going to describe my personal views about managing large software developments. I have had various assignments during the past nine years, mostly concerned with the development of software packages for spacecraft mission planning, commanding and post-flight analysis. In these assignments I have experienced different degrees of success with respect to arriving at an operational state, on-time, and within costs. I have become prejudiced by my experiences and I am going to relate some of these prejudices in this presentation.&lt;/blockquote&gt;
&lt;p&gt;Royce goes on to describe what many refer to as “the waterfall method” of:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;System requirements&lt;/li&gt;
&lt;li&gt;Software requirements&lt;/li&gt;
&lt;li&gt;Analysis&lt;/li&gt;
&lt;li&gt;Program design&lt;/li&gt;
&lt;li&gt;Coding&lt;/li&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;li&gt;Operations&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Royce doesn’t call this approach “waterfall” in the paper and he points out that it “is risky and invites failure”. He also states that it is &lt;strong&gt;“important to involve the customer in a formal way so that he has committed himself at earlier points before final delivery. To give the contractor free rein between requirement definition and operation is inviting trouble.”&lt;/strong&gt; It is here that the past tells us that we are building software for people and the best input into building software is people. People who can describe what they need and tell us how well we’re going by trying out our work - a collaborative feedback loop.&lt;/p&gt;
&lt;p&gt;In The Sciences of the Artificial, Herbert Simon posits:&lt;/p&gt;
&lt;blockquote&gt;
An artifact can be thought of as a meeting point an “interface” in today’s terms between an “inner” environment, the substance and organization of the artifact itself, and an ’’outer&amp;quot; environment, the surroundings in which it operates. If the inner environment is appropriate to the outer environment, or vice versa, the artifact will serve its intended purpose.&lt;/blockquote&gt;
&lt;p&gt;It’s a great book and really gets into the act of design in the construction of artificial artifacts (such as software). Simon’s use of terms such as “satisficing”, “problem space” and “search strategies” give vocabulary items to the act of a project as a journey. It is upon considering software development as an act of design and a project as a journey that I see the Agile approach offering more than the linear, segmented viewpoints.&lt;/p&gt;
&lt;div class="section" id="agile-basics"&gt;
&lt;h2&gt;Agile basics&lt;/h2&gt;
&lt;p&gt;In February 2001 a small group of software people met in Utah to see if they could coalesce their various thoughts and experiences. This wasn’t an ISO committee or a Government research body - it was some 17 guys with a body of experience in software development. Let’s go back to the values they came up with and re-read &lt;a class="reference external" href="http://agilemanifesto.org/"&gt;their manifesto&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Individuals and interactions&lt;/strong&gt; over processes and tools&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Working software&lt;/strong&gt; over comprehensive documentation&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Customer collaboration&lt;/strong&gt; over contract negotiation&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Responding to change&lt;/strong&gt; over following a plan&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are also &lt;a class="reference external" href="http://www.agilemanifesto.org/principles.html"&gt;12 principles&lt;/a&gt; underlying these 4 deceptively simple ideas - go read them. Also, understand that these are the aspects that make up Agile according to those 17 people and, by extension, those that claim they “do Agile”. Now, you might be a Scrum shop, an XP team, Crystal, insane chaos, whatever - it’s important to sit back, reflect and think about how effective the team is in meeting the user’s goals. This is the area in which all four items come together: &lt;strong&gt;Is the manner in which we’re working (interacting) with the users (individuals), really ensuring that we all understand what needs to be done (collaboration) to build working software that helps them and are we responding to new ideas and clarifications from our users?&lt;/strong&gt; The various agile methodologies provide projects/teams with lamposts and signs down the Agile street but I recommend that all teams are best served with checking against their approach/interpretation against the manifesto to make sure they haven’t processed the user out of sight or put processes and tools first.&lt;/p&gt;
&lt;p&gt;In many senses I don’t actually see this as an Agile-specific area of thought. If I can boldly argue: most projects commence with the aim of delivering some benefit to some party that (hopefully) has a greater return than the cost of the project or the cost of business as usual. From that starting point we see projects leave dock and either arrive at the next port or go horribly off course (a small number may return to dock when they discover the sea can’t be crossed). It’s a this point I really turn to Alistair Cockburn’s &lt;a class="reference external" href="http://alistair.cockburn.us/Oath+of+Non-Allegiance"&gt;**Oath of non-allegiance**&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
I promise not to exclude from consideration any idea based on its source, but to consider ideas across schools and heritages in order to find the ones that best suit the current situation.&lt;/blockquote&gt;
&lt;p&gt;There is a huge spectrum of people that state that their projects are Agile. Some are almost clerical in following what they percieve as the one true methodology. Others are extremely sloppy in terms of process but their team knows their users really well and they just get s**t done. Several are really just running a prioritised task list and use “Agile” as a method to avoid documenting anything, committing to anything or being responsible for anything. These last group really dilute the validity of the ideal and, unfortunately, when their project fails it’s often blamed on the agile approach - next time we’ll really need to micro-manage the team.&lt;/p&gt;
&lt;p&gt;It’s important that we sometimes sit back and make sure we’re really being Agile and not just process-gazing. Those that claim to be agile should be checked for that claim and helped where they fall short. Some of my projects aren’t agile and I’m honest when I say we use aspects of agile methodology but I don’t claim the approach meets the agile manifesto. I also try to encourage the movement of those projects back to the agile path. However, I’m often a little perplexed when I use something like a use case template to help guide thinking and get told “use cases aren’t agile”. In further posts I want to explore why I think they (and other tools) are and why people have constructed some sort of checklist of what isn’t agile.&lt;/p&gt;
&lt;/div&gt;
</content><category term="use-case"></category><category term="waterfall"></category><category term="agile"></category></entry></feed>