<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Prag-o-matic - Duncan</title><link href="http://www.duncan.dickinson.name/" rel="alternate"></link><link href="https://www.duncan.dickinson.name/feeds/duncan.atom.xml" rel="self"></link><id>http://www.duncan.dickinson.name/</id><updated>2015-03-26T07:53:00+10:00</updated><entry><title>Standing up against stand ups</title><link href="http://www.duncan.dickinson.name/2015/03/standing-up-against-stand-ups.html" rel="alternate"></link><published>2015-03-26T07:53:00+10:00</published><updated>2015-03-26T07:53:00+10:00</updated><author><name>Duncan</name></author><id>tag:www.duncan.dickinson.name,2015-03-26:/2015/03/standing-up-against-stand-ups.html</id><summary type="html">&lt;p&gt;In the first post following on from &lt;a class="reference external" href="http://blog.duncan.dickinson.name/2015/03/thats-not-agile.html"&gt;That’s not agile&lt;/a&gt; I want to look at a practice I find to be one of the most tricky and contentious issues I encounter when discussing Agile, especially with developers: the daily stand up. Many Agile people tell me that these daily …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the first post following on from &lt;a class="reference external" href="http://blog.duncan.dickinson.name/2015/03/thats-not-agile.html"&gt;That’s not agile&lt;/a&gt; I want to look at a practice I find to be one of the most tricky and contentious issues I encounter when discussing Agile, especially with developers: the daily stand up. Many Agile people tell me that these daily sessions are a MUST and you’re not Agile if you’re not doing them. However, these sessions aren’t described in all agile methodologies and, in many cases, you can watch these meetings as if you were an anthropologist and see where the project is not actually agile at all.&lt;/p&gt;
&lt;p&gt;Many agile teams use stand ups (or daily scrums) to ensure that the team is working through the backlog/tasks/stories effectively. Take a look at the list below and see if any/all of these match what you see/experience:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The stand up goes for longer than 15–20 minutes&lt;/li&gt;
&lt;li&gt;The project manager/scrum master/loudest person does all the talking&lt;/li&gt;
&lt;li&gt;Most people are sitting down&lt;/li&gt;
&lt;li&gt;People have their laptops, tablets and mobiles out and are reading off them&lt;/li&gt;
&lt;li&gt;It’s rare that the whole team is there at every stand up&lt;/li&gt;
&lt;li&gt;Someone is pointing at a gantt chart&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Most stand ups I’ve been involved in usually hit 3–4 of those items. In most situations I can tell that the team is needing (crying out for) better communication levels so Item 1 is most common. Of course, if the project team is communicating fluently throughout the day, these daily meetings &lt;strong&gt;may not be required at all&lt;/strong&gt;. In fact, the somewhat artificial nature of the approach can lead to breaks in thought and communication that’s already going on within the team.&lt;/p&gt;
&lt;p&gt;Some project managers have indicated to me that it’s a useful approach if the team is distributed and/or some members are working across projects. In both of these situations I wonder if the structure is actually debilitating and that, instead of stand ups, the project would be better served by bringing the team into the same room and ensuring team members are focussed on one project at a time. The context switching hits in numerous ways - it’s an attention break and sometimes a complete change in direction (especially for the project part-timer).&lt;/p&gt;
&lt;p&gt;Another reason often cited is that developers don’t communicate very well. First up, it’s important to check that assertion before reacting to it as many developers will sit right next to each other and instant message throughout the day. If your criteria for communication is talking out loud perhaps you need to dig a bit deeper. &lt;a class="reference external" href="http://alistair.cockburn.us/Crystal+Clear+distilled"&gt;Crystal Clear&lt;/a&gt; stresses the utility of &lt;a class="reference external" href="http://alistair.cockburn.us/Osmotic+communication"&gt;osmotic communication&lt;/a&gt; and many of us will have seen projects that just hum - people talking, sharing, laughing. Team members are actively problem-solving with each other, grabbing a coffee and discussing a piece of the architecture or drawing all over the whiteboard. Those teams using XP are pair programming and those that aren’t XP’ers may pair program ad-hoc when a tricky problem has come up. Throughout the day there are waves of quiet as people focus and louder times when discussions need to happen.&lt;/p&gt;
&lt;p&gt;My big question here is: when the team is humming, do you really need a stand-up?&lt;/p&gt;
&lt;p&gt;If the team is in the same location and someone completes a story couldn’t they just call out “I’m done with Story X and reckon I’ll pick up Story Y” or if they have a problem is calling out “Story W is killing me - the message queue looks like it’s not &amp;lt;blah&amp;gt; - anyone able to help me for a bit?” not effective? Do they really need a stand up? Doesn’t the PM/scrum master/lead hear this because they’re in the same room anyway?&lt;/p&gt;
&lt;p&gt;I believe the answer is that you don’t need these daily meeting but… in the early stage of a project or with a new team member it might be worth using stand ups to try and kick-start the communication. As always, monitor, reflect and respond to the situation - don’t just do something because you’ve been told “that’s agile”.&lt;/p&gt;
</content><category term="stand up"></category><category term="communication"></category><category term="agile"></category></entry><entry><title>That's not agile</title><link href="http://www.duncan.dickinson.name/2015/03/thats-not-agile.html" rel="alternate"></link><published>2015-03-25T18:35:00+10:00</published><updated>2015-03-25T18:35:00+10:00</updated><author><name>Duncan</name></author><id>tag:www.duncan.dickinson.name,2015-03-25:/2015/03/thats-not-agile.html</id><summary type="html">&lt;p&gt;I often hear “I do agile” and “That’s not agile” and I’m starting to put it into the same bucket as “That’s not an enterprise approach”. Such terms are often used to reassure those that have just heard that “Agile is good” or as a pre-emptive strike …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I often hear “I do agile” and “That’s not agile” and I’m starting to put it into the same bucket as “That’s not an enterprise approach”. Such terms are often used to reassure those that have just heard that “Agile is good” or as a pre-emptive strike against those asking where the documentation is. I’m thinking of a few posts around items that are often labelled as “Not Agile” but perhaps really can be. First, though, I want to dig into the term “Agile” a little.&lt;/p&gt;
&lt;p&gt;The approaches that were swirling around before Agile was something in which you could be certified included ideas such as rapid prototyping, iterative development, use cases and adaptive processes. It seemed that people were tiring of bloated projects that marched on like budget-destroying zombies. Central to many concerns appears to have been the issue of gathering requirements/needs and turning them into software. Do it as two very large blocks and the requirements phase isn’t based in the reality of implementation. Expecting that the users/stakeholders can describe all requirements/needs/goals completely and comprehensively up-front was to ignore the complexity of what is being built and our ability to grasp the context as a whole.&lt;/p&gt;
&lt;p&gt;But let’s go back a little. In August 1970, Dr Winston W Royce started paper in Proceedings, IEEE WESCON with:&lt;/p&gt;
&lt;blockquote&gt;
I am going to describe my personal views about managing large software developments. I have had various assignments during the past nine years, mostly concerned with the development of software packages for spacecraft mission planning, commanding and post-flight analysis. In these assignments I have experienced different degrees of success with respect to arriving at an operational state, on-time, and within costs. I have become prejudiced by my experiences and I am going to relate some of these prejudices in this presentation.&lt;/blockquote&gt;
&lt;p&gt;Royce goes on to describe what many refer to as “the waterfall method” of:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;System requirements&lt;/li&gt;
&lt;li&gt;Software requirements&lt;/li&gt;
&lt;li&gt;Analysis&lt;/li&gt;
&lt;li&gt;Program design&lt;/li&gt;
&lt;li&gt;Coding&lt;/li&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;li&gt;Operations&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Royce doesn’t call this approach “waterfall” in the paper and he points out that it “is risky and invites failure”. He also states that it is &lt;strong&gt;“important to involve the customer in a formal way so that he has committed himself at earlier points before final delivery. To give the contractor free rein between requirement definition and operation is inviting trouble.”&lt;/strong&gt; It is here that the past tells us that we are building software for people and the best input into building software is people. People who can describe what they need and tell us how well we’re going by trying out our work - a collaborative feedback loop.&lt;/p&gt;
&lt;p&gt;In The Sciences of the Artificial, Herbert Simon posits:&lt;/p&gt;
&lt;blockquote&gt;
An artifact can be thought of as a meeting point an “interface” in today’s terms between an “inner” environment, the substance and organization of the artifact itself, and an ’’outer&amp;quot; environment, the surroundings in which it operates. If the inner environment is appropriate to the outer environment, or vice versa, the artifact will serve its intended purpose.&lt;/blockquote&gt;
&lt;p&gt;It’s a great book and really gets into the act of design in the construction of artificial artifacts (such as software). Simon’s use of terms such as “satisficing”, “problem space” and “search strategies” give vocabulary items to the act of a project as a journey. It is upon considering software development as an act of design and a project as a journey that I see the Agile approach offering more than the linear, segmented viewpoints.&lt;/p&gt;
&lt;div class="section" id="agile-basics"&gt;
&lt;h2&gt;Agile basics&lt;/h2&gt;
&lt;p&gt;In February 2001 a small group of software people met in Utah to see if they could coalesce their various thoughts and experiences. This wasn’t an ISO committee or a Government research body - it was some 17 guys with a body of experience in software development. Let’s go back to the values they came up with and re-read &lt;a class="reference external" href="http://agilemanifesto.org/"&gt;their manifesto&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Individuals and interactions&lt;/strong&gt; over processes and tools&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Working software&lt;/strong&gt; over comprehensive documentation&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Customer collaboration&lt;/strong&gt; over contract negotiation&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Responding to change&lt;/strong&gt; over following a plan&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are also &lt;a class="reference external" href="http://www.agilemanifesto.org/principles.html"&gt;12 principles&lt;/a&gt; underlying these 4 deceptively simple ideas - go read them. Also, understand that these are the aspects that make up Agile according to those 17 people and, by extension, those that claim they “do Agile”. Now, you might be a Scrum shop, an XP team, Crystal, insane chaos, whatever - it’s important to sit back, reflect and think about how effective the team is in meeting the user’s goals. This is the area in which all four items come together: &lt;strong&gt;Is the manner in which we’re working (interacting) with the users (individuals), really ensuring that we all understand what needs to be done (collaboration) to build working software that helps them and are we responding to new ideas and clarifications from our users?&lt;/strong&gt; The various agile methodologies provide projects/teams with lamposts and signs down the Agile street but I recommend that all teams are best served with checking against their approach/interpretation against the manifesto to make sure they haven’t processed the user out of sight or put processes and tools first.&lt;/p&gt;
&lt;p&gt;In many senses I don’t actually see this as an Agile-specific area of thought. If I can boldly argue: most projects commence with the aim of delivering some benefit to some party that (hopefully) has a greater return than the cost of the project or the cost of business as usual. From that starting point we see projects leave dock and either arrive at the next port or go horribly off course (a small number may return to dock when they discover the sea can’t be crossed). It’s a this point I really turn to Alistair Cockburn’s &lt;a class="reference external" href="http://alistair.cockburn.us/Oath+of+Non-Allegiance"&gt;**Oath of non-allegiance**&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
I promise not to exclude from consideration any idea based on its source, but to consider ideas across schools and heritages in order to find the ones that best suit the current situation.&lt;/blockquote&gt;
&lt;p&gt;There is a huge spectrum of people that state that their projects are Agile. Some are almost clerical in following what they percieve as the one true methodology. Others are extremely sloppy in terms of process but their team knows their users really well and they just get s**t done. Several are really just running a prioritised task list and use “Agile” as a method to avoid documenting anything, committing to anything or being responsible for anything. These last group really dilute the validity of the ideal and, unfortunately, when their project fails it’s often blamed on the agile approach - next time we’ll really need to micro-manage the team.&lt;/p&gt;
&lt;p&gt;It’s important that we sometimes sit back and make sure we’re really being Agile and not just process-gazing. Those that claim to be agile should be checked for that claim and helped where they fall short. Some of my projects aren’t agile and I’m honest when I say we use aspects of agile methodology but I don’t claim the approach meets the agile manifesto. I also try to encourage the movement of those projects back to the agile path. However, I’m often a little perplexed when I use something like a use case template to help guide thinking and get told “use cases aren’t agile”. In further posts I want to explore why I think they (and other tools) are and why people have constructed some sort of checklist of what isn’t agile.&lt;/p&gt;
&lt;/div&gt;
</content><category term="use-case"></category><category term="waterfall"></category><category term="agile"></category></entry><entry><title>Continuous Integration</title><link href="http://www.duncan.dickinson.name/2015/01/continuousintegration.html" rel="alternate"></link><published>2015-01-15T16:20:00+10:00</published><updated>2015-01-15T16:20:00+10:00</updated><author><name>Duncan</name></author><id>tag:www.duncan.dickinson.name,2015-01-15:/2015/01/continuousintegration.html</id><summary type="html">&lt;p&gt;&lt;em&gt;“It works on my machine” really translates to “I don’t know why it works - I just clicked buttons” and the offender forced to buy lunch for the team&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Continuous Integration (CI) focusses on ensuring that a project’s code successfully builds whenever the code base (usually stored in a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;“It works on my machine” really translates to “I don’t know why it works - I just clicked buttons” and the offender forced to buy lunch for the team&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Continuous Integration (CI) focusses on ensuring that a project’s code successfully builds whenever the code base (usually stored in a version control system) changes. The &amp;quot;continuous&amp;quot; aspect relates to the fact that the build is run every time code is checked in (committed). Given that some approaches see each team member commit code several times a day, the CI system may be quite busy. Having worked in a team where one member kept on committing code that broke the build, using a CI approach helped us determine where problems were coming from and saved time misspent thinking that your own code is wrong (&lt;tt class="docutils literal"&gt;svn blame&lt;/tt&gt; &lt;a class="footnote-reference" href="#f1" id="id1"&gt;[1]&lt;/a&gt;).&lt;/p&gt;
&lt;blockquote&gt;
In fact you could have a CI process that rolls back a commit that breaks the build.&lt;/blockquote&gt;
&lt;p&gt;The CI approach differs somewhat from approaches such as “nightly builds” as it really is continuous and can really help make sure people are only committing code that doesn’t break the build &lt;a class="footnote-reference" href="#f2" id="id2"&gt;[2]&lt;/a&gt;. This constant feedback loop should trigger a fix immediately whilst the code is “top of mind”. An associated work practice is “pull often, commit small, commit often” so that the team is working in-step and the CI process helps capture issues before they get too big &lt;a class="footnote-reference" href="#f3" id="id3"&gt;[3]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This may sound a little complex but a CI process really has only 3 responsibilities:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Trigger a build when new code is checked into version control &lt;a class="footnote-reference" href="#f4" id="id4"&gt;[4]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Run the build and its associated unit tests&lt;/li&gt;
&lt;li&gt;Report on any failures&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Your CI process doesn’t have to be a huge bells and whistles affair. In the most basic case it may be a desktop PC that developers walk over to and manually start a build. The use of a separate system for CI helps reduce (but not eliminate) the false positives that occur when a build succeeds on a developer’s machine because of the miscellaneous debris crawling around developer laptops (old versions, libraries on classpaths that aren’t included in the build config etc).&lt;/p&gt;
&lt;p&gt;There are many CI systems around that help you get going with a more automated CI environment:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I’ve used &lt;a class="reference external" href="http://jenkins-ci.org/"&gt;Jenkins&lt;/a&gt; and, prior to that, &lt;a class="reference external" href="http://hudson-ci.org/"&gt;Hudson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The team I’m with at present are working with &lt;a class="reference external" href="https://www.atlassian.com/software/bamboo"&gt;Atlassian Bamboo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.go.cd/"&gt;ThoughtWorks’ Go&lt;/a&gt; has been made available as open source&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://continuum.apache.org/"&gt;Apache Continuum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you’re after an online service, take a look at &lt;a class="reference external" href="https://travis-ci.org/recent"&gt;Travis&lt;/a&gt; - I’ve not used it but it gets good press.&lt;/p&gt;
&lt;div class="section" id="automating-your-build"&gt;
&lt;h2&gt;Automating your build&lt;/h2&gt;
&lt;p&gt;Automating your build is extremely useful in terms of successfully establishing your CI environment but, beyond this, it’s a good candidate for the “best practice” list. In a CI environment an (efficient) automated build is extremely important as the build should be possible without manual intervention. Long build times may indicate that the build needs to be broken up into smaller components or that your tests are verging away from unit tests towards integration testing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="workflows"&gt;
&lt;h2&gt;Workflows&lt;/h2&gt;
&lt;p&gt;In a coding approach where you use branching workflows you might have the CI system “watch” only certain branches. Furthermore, it could be useful to consider a &lt;a class="reference external" href="http://www.yegor256.com/2014/07/21/read-only-master-branch.html"&gt;Read Only Master Branch&lt;/a&gt; in which individuals/features/ideas/etc have their own branch but a merge to the master branch is tested &lt;em&gt;before&lt;/em&gt; being accepted.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="component-based-development"&gt;
&lt;h2&gt;Component-based development&lt;/h2&gt;
&lt;p&gt;A CI server can be very useful in projects that have teams working on separate components. For example, Apache Maven-based projects can have their CI server deploy SNAPSHOT artefacts to an artefact server (such as &lt;a class="reference external" href="http://www.sonatype.com/nexus"&gt;Sonatype Nexus&lt;/a&gt;). This means that other developers with that dependency will have the new component version downloaded the next time they run a build.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="steak-knives"&gt;
&lt;h2&gt;Steak knives&lt;/h2&gt;
&lt;p&gt;As you develop your CI infrastructure you can start exploring a number of toolsets that can further aid the development effort:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Software metric tools such as &lt;a class="reference external" href="http://www.sonarqube.org/"&gt;SonarQube&lt;/a&gt; can help you hone in on areas of weakness in your code quality (e.g. duplication, dodgy coding practice or a lack of documentation)&lt;ul&gt;
&lt;li&gt;These are best run less frequently (nightly) as they can be time consuming&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generate your documentation such as your javadoc or Maven site on a nightly basis&lt;/li&gt;
&lt;li&gt;Create a “clean room” build that freshly downloads all dependencies before building - this really helps catch issues such as 3rd-party libraries that just disappear.&lt;/li&gt;
&lt;li&gt;Deploy an instance of the built service into a virtual machine for user testing, interface testing (e.g. with &lt;a class="reference external" href="http://www.seleniumhq.org/"&gt;Selenium&lt;/a&gt; or integration tests &lt;a class="footnote-reference" href="#f5" id="id5"&gt;[5]&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Also best run less frequently - especially if you’re going to be soaking up a fair bit of system resources.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Get &lt;a class="reference external" href="https://wiki.jenkins-ci.org/display/JENKINS/ChuckNorris+Plugin"&gt;Chuck Norris&lt;/a&gt; in to make sure people know you’re serious!&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="test-drive"&gt;
&lt;h2&gt;Test drive&lt;/h2&gt;
&lt;p&gt;Most CI systems are quite easy to install and get running - even just on your laptop. I’d suggest that the best first-step is to allocate 3–4 hours to install a CI system (try Jenkins), configure a job for your main codebase, run it and see how it goes. Then, add in Chuck Norris.&lt;/p&gt;
&lt;p class="rubric"&gt;Footnotes&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="f1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;This was used as an in-joke - see the &lt;a class="reference external" href="http://svnbook.red-bean.com/en/1.7/svn.ref.svn.c.blame.html"&gt;SVN Book&lt;/a&gt; - but, seriously, the CI server is not a torture device that lets everyone insult a team member.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="f2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;In a regular environment I consider the build to be broken when it won’t compile or a unit test fails. Usually a less-frequent build would run other tests (integration, UI etc) but I usually label failures differently (e.g. “broke the deployment”)&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="f3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;It can be useful to manually trigger the more comprehensive build and test suite once a feature is complete - why wait until tomorrow to see if it’s broken?&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="f4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Look at &lt;a class="reference external" href="https://help.github.com/articles/about-webhooks"&gt;GitHub&lt;/a&gt; and &lt;a class="reference external" href="https://confluence.atlassian.com/display/BITBUCKET/Manage+Bitbucket+hooks"&gt;BitBucket&lt;/a&gt; (Web)hooks for the push-model approach.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="f5" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Most of my integration testing experience has been manual or script-based. However, projects such as &lt;a class="reference external" href="http://www.citrusframework.org/"&gt;Citrus Framework&lt;/a&gt; look to provide a good basis for easily established integration tests.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="development"></category><category term="maven"></category><category term="continuous integration"></category></entry><entry><title>Version control</title><link href="http://www.duncan.dickinson.name/2014/12/version-control.html" rel="alternate"></link><published>2014-12-26T07:00:00+10:00</published><updated>2014-12-26T07:00:00+10:00</updated><author><name>Duncan</name></author><id>tag:www.duncan.dickinson.name,2014-12-26:/2014/12/version-control.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Don’t write a single line of code until you have a version control system in place&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Almost all developers know of at least one version control system (also called source code control or revision control). These systems provide a backup of your work and allow you to dip back …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Don’t write a single line of code until you have a version control system in place&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Almost all developers know of at least one version control system (also called source code control or revision control). These systems provide a backup of your work and allow you to dip back into the past to find some lost code or work out where a bug may have crept in. However, with a head full of steam and the desire to get a prototype going to demo to the team/client/world you’ll fire up an IDE and start coding and version control won’t enter your head. Stop for just 5 minutes and get a version control repository running first. This is an insurance policy for a number of things:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;you have a backup when your laptop dies on you&lt;/li&gt;
&lt;li&gt;when you decide to tear down a section of code - you can always revert back if you find you’ve gone down the wrong path&lt;/li&gt;
&lt;li&gt;you can easily share your code and encourage others to assist&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="which-to-use"&gt;
&lt;h2&gt;Which to use?&lt;/h2&gt;
&lt;p&gt;There are several contemporary version control systems you could consider using, each with their own benefits. Client-server (or centralised) version control systems maintain a master copy on a central server with a local copy being “checked out” by a client. Generally the server maintains the full version history and the client only accesses a specific version as a working copy. Distributed version control systems (DVCS) don’t require a central master copy and all instances of the codebase includes the full version history.&lt;/p&gt;
&lt;p&gt;If you don’t currently use a version control system, the following options are worth exploring as they’re heavily used and well documented:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Git_(software)"&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Mercurial"&gt;Mercurial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Subversion"&gt;Subversion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you’re able to influence the selection of a version control system, it’d be worth opting for a DVCS such as Git - it has a lot of support and most up-to-date developers have used it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hosted-services"&gt;
&lt;h2&gt;Hosted services&lt;/h2&gt;
&lt;p&gt;Historically, developers may have deferred the use of a version control system as these needed to be installed and managed on a server. However, there are a number of hosted services that take away the burden of running your own version control system. Some offer free hosting, usually for open source projects, but also offer paid accounts for closed codebases.&lt;/p&gt;
&lt;p&gt;The key hosted version control providers include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bitbucket.org/"&gt;Atlassian's Bitbucket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.codeplex.com/"&gt;Microsoft's Codeplex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://code.google.com/"&gt;Google code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://sourceforge.net/"&gt;Sourceforge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="version-control-workflows"&gt;
&lt;h2&gt;Version control workflows&lt;/h2&gt;
&lt;p&gt;It's one thing to use version control, it's another to use it effectively - especially when you have larger teams or multiple product versions. &lt;a class="reference external" href="https://www.atlassian.com/git/tutorials/comparing-workflows"&gt;Atlassian provide an excellent overview&lt;/a&gt; of the most common Git workflows - it's well worth your reading time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="one-last-note"&gt;
&lt;h2&gt;One last note&lt;/h2&gt;
&lt;p&gt;DropBox and Google Drive are not version control systems for development purpose. They are great systems for sharing documents etc but there’s a lot more development functionality and integration options in a good version control system.&lt;/p&gt;
&lt;/div&gt;
</content><category term="development"></category><category term="project management"></category></entry><entry><title>Wear the hats every day (Part 3)</title><link href="http://www.duncan.dickinson.name/2014/12/wear-hats-every-day-part-3.html" rel="alternate"></link><published>2014-12-12T07:00:00+10:00</published><updated>2014-12-12T07:00:00+10:00</updated><author><name>Duncan</name></author><id>tag:www.duncan.dickinson.name,2014-12-12:/2014/12/wear-hats-every-day-part-3.html</id><summary type="html">&lt;p&gt;&lt;em&gt;This is Part 3 of a 3-part series.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Often when I'm working&amp;nbsp; with teams and individuals I don't formally use the Six Thinking Hats. In fact, I rarely make it explicit that this is guiding the discussion. As a project manager or business analyst I use the hats to guide …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;This is Part 3 of a 3-part series.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Often when I'm working&amp;nbsp; with teams and individuals I don't formally use the Six Thinking Hats. In fact, I rarely make it explicit that this is guiding the discussion. As a project manager or business analyst I use the hats to guide the discussion, especially to dig deeper into statements. For example, I might be tasked with analysing a process as-is and work towards the future process. The naive way to do this is to ask a group to describe their process/system and then how they feel it could be improved. This is suboptimal as it can gloss over deeper issues and also puts people on the spot. Instead, I might follow a process such as the one that follows.&lt;/p&gt;
&lt;p&gt;Let’s quickly remind ourselves of the hats:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;White hat&lt;/strong&gt;: The white hat focuses on facts.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Red hat&lt;/strong&gt;: The red hat focuses on feelings&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Black hat&lt;/strong&gt;: The black hat focuses on caution&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Yellow hat&lt;/strong&gt;: The yellow hat focuses on optimism&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Green hat&lt;/strong&gt;: The green hat focuses on being creative&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Blue hat&lt;/strong&gt;: The blue hat focuses on the thinking process&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="stage-1-find-out-what-is"&gt;
&lt;h2&gt;Stage 1 - Find out what is&lt;/h2&gt;
&lt;p&gt;I review the project brief and any existing process documentation (White Hat) or ask a team member to individually describe it to me. I may also look into related policies and laws to determine the broader organisational context.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="stage-2-understand-why-it-is"&gt;
&lt;h2&gt;Stage 2 - Understand why it is&lt;/h2&gt;
&lt;p&gt;I then meet with the team(s) involved and go through the process to determine if the documentation matches reality (White hat). This could run as a large workshop or individual small groups depending on how I feel I'd get the best results (Blue hat). The workshop may use the review of the existing process as its spine but the discussion will lead in various directions, sometimes prompted by me or initiated by participants:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The review may draw out disconnects between the &amp;quot;theory&amp;quot; and the &amp;quot;reality&amp;quot; and the Red hat can help here if parts of the process are avoided or ignored - it's important to find out if people avoid something due to frustration.&lt;/li&gt;
&lt;li&gt;The Black hat may also be useful here if people raise concerns about the current process. Perhaps things get through that shouldn't or parts of the process are rushed due to time expectations. These can be cautionary tales that could be handled in the new process.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="stage-3-consider-the-path-ahead"&gt;
&lt;h2&gt;Stage 3 - Consider the path ahead&lt;/h2&gt;
&lt;p&gt;I then take a break - maybe for a day or more. This is Blue hat time - a chance to review my findings, reflect on the various parties, perhaps seek clarification on various elements, speak to management about progress, and even prepare some discussion materials such as flow charts. This helps me work out my next focus: improving the process.&lt;/p&gt;
&lt;p&gt;Knowing what constitutes &amp;quot;improving&amp;quot; is critical. Does the organisation want to save money, improve compliance, reduce delays etc? Perhaps the organisation isn't sure what's happening &amp;quot;on the ground&amp;quot; and is seeking clarity.&lt;/p&gt;
&lt;p&gt;This is also a time to classify the type of process or system you're looking at. If you're working in a highly regulated environment then a new process may be predetermined and focus is on how to gain efficiencies. At the other end of the spectrum you may be in a complex environment that requires you to navigate personal, structural, technical and even social challenges. Knowing the lay of the land before embarking on a journey can provide some &amp;quot;travel insurance&amp;quot;.&lt;/p&gt;
&lt;p&gt;It's important to also consider the option of not changing anything - the existing system/process may operate effectively or a new system may cost more than any potential gains. This is a &amp;quot;null hypothesis&amp;quot; that predicts that nothing will be significantly changed by action.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="stage-4-start-the-journey"&gt;
&lt;h2&gt;Stage 4 - Start the journey&lt;/h2&gt;
&lt;p&gt;At this point the road will diverge based on your Blue hat thinking and planning. I've rarely found projects match up in such a way that I can just repeat what I'd done earlier - this is why experience, agility and good humour are perhaps the most important skills for project managers and business analysts. Rather than just say &amp;quot;This stage depends on many things&amp;quot;, I'll mention some common schemes I employ:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The project may allow for a lot of creative (Green hat) thinking and this could let teams work on prototypes and then use the White, Red, Black and Yellow hats to compare and contrast each solution to determine the optimal one.&lt;/li&gt;
&lt;li&gt;A large stuctural change in an organisation or the industry might be in play and require a lot of Red hat discussions to determine the impact on the people involved. The Yellow hat and the Black hat can then help guide and progress thinking - with the Green hat letting people build new ideas that grow Yellow hat ideas and shrink Black hat issues.&lt;/li&gt;
&lt;li&gt;Unfortunately the technical solution may have already been selected in a &amp;quot;cart before the horse&amp;quot; approach. In this case you have a &amp;quot;fixed cost&amp;quot; and then use the hats to determine the most effective outcome.&lt;/li&gt;
&lt;li&gt;&amp;nbsp;The time or budget available for the project may be less than optimal. In this case the White hat helps you focus on what you know and manage project scope. The Yellow and Green hats can help find opportunities within the limitations and the Black hat helps manage scope.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lastly, never be afraid to go back to the earlier stages to check and verify your progress.&lt;/p&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;That wraps up the 3-part introduction to how I approach the 6 Thinking Hats in my work. Like any thinking skill using the 6 Hats is something you have to do over time so as to find how it best works for you.&lt;/p&gt;
&lt;p&gt;® Six Thinking Hats is a registered trademark of Edward de Bono&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="6hats"></category><category term="problem solving"></category><category term="thinking"></category></entry><entry><title>Put on a hat when asking questions (Part 2)</title><link href="http://www.duncan.dickinson.name/2014/12/put-on-hat-when-asking-questions-part-2.html" rel="alternate"></link><published>2014-12-05T07:00:00+10:00</published><updated>2014-12-05T07:00:00+10:00</updated><author><name>Duncan</name></author><id>tag:www.duncan.dickinson.name,2014-12-05:/2014/12/put-on-hat-when-asking-questions-part-2.html</id><summary type="html">&lt;p&gt;&lt;em&gt;This is Part 2 of a 3-part series.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You can work through each of the hats in any order but it’s more effective when two hats pair up. This isn’t to play each off each other or fall into debate (something your use of the hats is trying …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;This is Part 2 of a 3-part series.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You can work through each of the hats in any order but it’s more effective when two hats pair up. This isn’t to play each off each other or fall into debate (something your use of the hats is trying to avoid). Rather, the paired hats work well together and you may run the discussion with one hat then review with its pair.&lt;/p&gt;
&lt;p&gt;The pairing also helps manage the discussion by:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Separating Black and Red hat thinking - this is helpful as many people have decided (or been told) that Black hat thinking is negative thinking. A statement such as “This won’t work as the network team don’t get it” is Red hat thinking and not Black hat. A statement such as “The network team may not like this as it opens up the system too much” is Black hat as it raises a concern that needs to be looked into.&lt;/li&gt;
&lt;li&gt;Pairing the White and Red hat so as to help in determining if a statement of discussion is reflecting a fact or a feeling. These can sometimes be difficult to discern so having them in close proximity can help guide us in clarifying what’s being put forward.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s quickly remind ourselves of the hats:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;White hat&lt;/strong&gt;: The white hat focuses on facts.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Red hat&lt;/strong&gt;: The red hat focuses on feelings&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Black hat&lt;/strong&gt;: The black hat focuses on caution&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Yellow hat&lt;/strong&gt;: The yellow hat focuses on optimism&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Green hat&lt;/strong&gt;: The green hat focuses on being creative&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Blue hat&lt;/strong&gt;: The blue hat focuses on the thinking process&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So let’s look at the 3 pairings that work well.&lt;/p&gt;
&lt;div class="section" id="white-and-red"&gt;
&lt;h2&gt;White and red&lt;/h2&gt;
&lt;p&gt;This explores facts and feelings and can highlight areas such as processes that aren’t working.&lt;/p&gt;
&lt;p&gt;For example, an organisation may provide an online service that imposes a process on users that reflects the organisational structure very closely. Discussions with users may reveal that, whilst they can use the system, they find the process rather obscure as they’re not part of your organisation. This leads to frustration (expressed with the Red hat) that can help refine the process (White hat).&lt;/p&gt;
&lt;p&gt;When looking at new systems being introduced within an organisation, the White and Red hats can help with change management. The new system may introduce a need for re-skilling and new processes and it’s important to determine people how they feel about this and how they can be encouraged to engage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="black-and-yellow"&gt;
&lt;h2&gt;Black and yellow&lt;/h2&gt;
&lt;p&gt;System security is a great area for the Black and Yellow hats to pair up. It often feels like developers wear yellow hats (“this great new system really helps us analyse our customer needs”) but the systems administrators wear black hats (“this system looks like it opens up too much information”).&lt;/p&gt;
&lt;p&gt;Both statements are important to analyse and having both developers and sys admins wear the Black and Yellow hats gives them the opportunity to share their understanding and can really help a DevOps approach.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="green-and-blue"&gt;
&lt;h2&gt;Green and blue&lt;/h2&gt;
&lt;p&gt;There’s an increasing amount of literature around building creativity in organisations and good use of the Blue hat to guide and encourage thinking, rather than debate, can help to tap the knowledge and skills of everyone involved.&lt;/p&gt;
&lt;p&gt;The Blue hat helps call back the team when they’re deep in Green hat territory. It’s important to keep an eye on requirements (White hat), possible areas of concern (Black hat) etc but it’s also important not to keep interjecting or you risk breaking a useful chain of thought.&lt;/p&gt;
&lt;p&gt;The pairings listed above provide a handy guide to working through the thinking process but there are some areas for caution so always have the Blue hat ready:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The Black hat focuses on caution and isn’t a whinge-fest. It’s important to let people express optimistic views without being constantly rained on by someone who (proudly) calls themselves a “Black hat thinker” - they’re more likely to be expressing a Red hat thought. I like to start with the Yellow hat and see what people like then start to explore areas that need a critical eye. The goal is not to be all sunshine and lollipops - it’s to develop an effective solution.&lt;/li&gt;
&lt;li&gt;Creativity (Green hat) is important and can help an organisation become a leader in their market. However, few projects are a completely blank slate so it’s important to use the Blue hat to make sure that the team references other hats and can justify their actions - management is more likely to support something “out of the box” if you can explain it fully.&lt;/li&gt;
&lt;li&gt;Whilst the White hat focuses on facts, the “truth” can be a fickle and personal thing. Sifting and sorting Yellow and White hat thinking can be tricky, especially when you’re looking at complex problems.&lt;/li&gt;
&lt;li&gt;Establishing a common language/definition may be very useful here so that statements can be more quantifiable. For example “improved student outcomes” will have a large range of meaning depending on if you’re talking to: students, teachers, or administration&lt;/li&gt;
&lt;li&gt;Even legislation (law) may not be easily described as “fact” - especially if it hasn’t been tested. Instead of saying something like “raw data cannot be copyrighted” you may have to settle on a statement such as “raw data is unlikely to pass the 'sweat of the brow' provision of copyright law”. The more definite you can be with your facts, the easier they are to use when referring to them.&lt;/li&gt;
&lt;li&gt;Some people like to use statement prefixes such as “It’s well-known that…” and “I think we all agree that…” to enforce their point and knowingly or to (perhaps unknowingly) quiet most dissent. It’s important to check across that group if it is indeed a fact (White hat) or a feeling (Red hat). Both are important so don’t dismiss the statement - it needs to be categorised and noted - throwing it away is likely to motivate the statement’s originator to try to undermine the discussion.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the next (and final) instalment I’ll offer an example of how I use the Six Thinking Hats in my work.&lt;/p&gt;
&lt;p&gt;® Six Thinking Hats is a registered trademark of Edward de Bono&lt;/p&gt;
&lt;/div&gt;
</content><category term="6hats"></category><category term="problem solving"></category><category term="thinking"></category></entry><entry><title>Try on the thinking hats (Part 1)</title><link href="http://www.duncan.dickinson.name/2014/11/try-on-thinking-hats-part-1.html" rel="alternate"></link><published>2014-11-30T12:32:00+10:00</published><updated>2014-11-30T12:32:00+10:00</updated><author><name>Duncan</name></author><id>tag:www.duncan.dickinson.name,2014-11-30:/2014/11/try-on-thinking-hats-part-1.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Instead of judging our way forward, we need to design our way forward. We need to be thinking 'what can be', not just about 'what is'&lt;/em&gt; - Edward de Bono&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This is Part 1 of a 3-part series.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;After several years of working long hours as a programmer I went into …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Instead of judging our way forward, we need to design our way forward. We need to be thinking 'what can be', not just about 'what is'&lt;/em&gt; - Edward de Bono&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This is Part 1 of a 3-part series.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;After several years of working long hours as a programmer I went into teaching - it was my interest in learning and problem solving that motivated me. As developers and development teams we engage in learning throughout our careers but primarily in terms of &amp;quot;technical skills&amp;quot; rather than &amp;quot;meta skills&amp;quot;. These meta skills focus on areas such as how we learn and how we engage others to help us achieve goals. I've worked with many people that I would class as excellent developers. These people can solve coding problems quickly and elegantly but I've noticed that they often do so with blinkers on. As teams engage in agile approaches to projects it is important that they engage more closely in understanding the environment in which they are working.&lt;/p&gt;
&lt;p&gt;Whilst studying and then working as a teacher, the skills around thinking and the area of&amp;nbsp;&lt;em&gt;metacognition&lt;/em&gt; became a primary interest to me. One well-known strategy for guiding thinking is Edward de Bono's &amp;quot;Six Thinking Hats&amp;quot; - first published in 1985. The six hats provide an enduring method for framing how teams can examine problems and seek effective solutions:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;White hat&lt;/strong&gt;: The white hat focuses on facts.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Red hat&lt;/strong&gt;: The red hat focuses on feelings&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;strong&gt;Black hat&lt;/strong&gt;: The black hat focuses on caution&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Be careful with the term &amp;quot;black hat&amp;quot; as it is often aligned with negativity&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Yellow hat&lt;/strong&gt;: The yellow hat focuses on optimism&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Green hat&lt;/strong&gt;: The green hat focuses on being creative&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Blue hat&lt;/strong&gt;: The blue hat focuses on the thinking process.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some people react badly to the six hats approach but it's important to understand what's causing this. Here are a few examples worth considering:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;This is just new age mumbo jumbo&amp;quot;&lt;/li&gt;
&lt;li&gt;Some people really like to argue and anything that sounds like they won't be able to push their idea threatens them. The key risk with these people is that they believe the loudest argument is the strongest argument. Encourage these people to engage but be definite in adhering to the process - calling out when they're trying to dominate.&lt;/li&gt;
&lt;li&gt;&amp;quot;This will take too long&amp;quot;&lt;/li&gt;
&lt;li&gt;Some people feel that it's quicker to &amp;quot;work out the answer and go for it&amp;quot;. Unfortunately this is often a form of &amp;quot;shallow&amp;quot; problem solving - they haven't really worked out a good answer and, usually, they've focussed on the technical aspect and not the whole issue. I've found that the first answer, once put under scrutiny, starts to fall apart quickly and, if the team had started development, a large amount of time is wasted in code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The best approach to handling criticisms is confidence. Make sure that you are comfortable with the six hats and that you keep the group on task. Don't be afraid to cancel the session if a participant just won't cooperate - walk away, put on your blue hat, reflect and look at approaching from a different angle. Avoid the following to help retain purpose:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Don't make people wear a hat as it can reduce the session into a side show.&lt;/li&gt;
&lt;li&gt;Don't allocate each person a specific hat for the session as the group should be working with the same hat at any one time.&lt;/li&gt;
&lt;li&gt;Stay &amp;quot;on hat&amp;quot; by parking comments that fall under a different hat. Note the point on a whiteboard and direct the group back to the current hat.&lt;/li&gt;
&lt;li&gt;Monitor the highly assertive group members. Not everyone likes to proactively put ideas forward but, assuming you have a good team, encouraging the whole team can lead to solutions that the loud mouths never thought of.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Blue hat is very useful when planning a session with an individual or a team. You don't have to use all of the hats in every session, indeed it can be very useful to focus on a single hat.&lt;/p&gt;
&lt;p&gt;One example is when reviewing a workflow: the White hat is really useful as you just want to know what the steps are and who carries them out - later on you could arrange a session that uses other hats to focus on issues such as problems with the workflow (Black hat) or improvements to the workflow (Green hat).&lt;/p&gt;
&lt;p&gt;In the next article I'll look at how you can use the hats in a pairing arrangement to help you to direct your questioning during analysis work.&lt;/p&gt;
&lt;div class="section" id="further-reading"&gt;
&lt;h2&gt;Further reading&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.penguin.com.au/products/9780141037554/six-thinking-hats-popular-penguins"&gt;Six Thinking Hats&lt;/a&gt; by Edward de Bono&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;® Six Thinking Hats is a registered trademark of Edward de Bono&lt;/p&gt;
&lt;/div&gt;
</content><category term="6hats"></category><category term="problem solving"></category><category term="thinking"></category></entry></feed>