<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Duncan's Dev Notebook</title>
    <link>https://dedickinson.github.io/</link>
    <atom:link href="https://dedickinson.github.io//feed.xml" rel="self" type="application/rss+xml" />
    <description>JBake Bootstrap Template</description>
    <language>en-gb</language>
    <pubDate>Wed, 12 Jul 2017 10:45:14 +1000</pubDate>
    <lastBuildDate>Wed, 12 Jul 2017 10:45:14 +1000</lastBuildDate>

    
    <item>
      <title>Basic Azure web app CI pipeline</title>
      <link>https://dedickinson.github.io//blog/2017/AzureWebAppCi.html</link>
      <pubDate>Fri, 7 Jul 2017 00:00:00 +1000</pubDate>
      <guid isPermaLink="false">blog/2017/AzureWebAppCi.html</guid>
      <description>
      &lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot;&gt;Table of Contents&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_vsts_and_app_services&quot;&gt;VSTS and App Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_the_web_apps&quot;&gt;The Web Apps&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#_the_build&quot;&gt;The Build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_approvals&quot;&gt;Approvals&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#_references&quot;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Azure Web Apps are really handy hosting environments and support CI/CD pipelines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a walkthrough of some work I did to highlight:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Configuring a project in Visual Studio Team Services (VSTS) using C# on .NET Core with ASP.NET Core&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Preparing a CI/CD pipeline in VSTS for deployment into an Azure App Service environment&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The code itself is minimal - just a random quote generator with a very limited set of quotes.
I often use this type of codebase to demonstrate a variety of CI/CD principles - I call it my
fortune cookie app (based on the old &lt;a href=&quot;https://en.wikipedia.org/wiki/Fortune_(Unix)&quot;&gt;Unix fortune program&lt;/a&gt;).
It&amp;#8217;s a very useful platform for demonstrators as it can be stand-alone, use databases (relational or other),
be a web api etc and I&amp;#8217;ve prepared it in a range of languages and systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unfortunately, VSTS does not support public repositories but the code is pretty much secondary
to the process I&amp;#8217;ll describe. The code is a pretty basic NET Core project that comes to life with the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;dotnet restore
dotnet build
dotnet watch run&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_vsts_and_app_services&quot;&gt;VSTS and App Services&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this demo I wanted to have a basic CI/CD pipeline running that:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Built new commits&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deploys automatically to an Azure App Service instance used for testing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Provide a manual approval gate for the production deployment&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Defining a CI/CD pipeline can be approached in a few ways:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;In VSTS as a build and release process&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the Azure Web App itself - this is the easiest for getting started. You can then go into VSTS and expand and configure as needed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_web_apps&quot;&gt;The Web Apps&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I created two Web App instancess - one for Test and one for Production.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I used the free App Service Plan tier as it&amp;#8217;s enough for the demo and you can get the whole thing
running for $0.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
You can use slots in Web Apps to provide blue/green deployment but I&amp;#8217;m going real simple in this demo.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you&amp;#8217;re going to setup CD via the Azure web app console, configure your Test web app instance first
and use it for your Continuous Delivery configuration.
That sets up an automatic CI/CD pipeline for you and your commits cause a release into the Test instance.
You can then re-engineer the pipeline to include a
Production environment (the second web app instance).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_the_build&quot;&gt;The Build&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To start off, I created a VSTS project and committed some basic &quot;hello, world&quot; code using
the &lt;code&gt;dotnet new mvc&lt;/code&gt; scaffold. Over in the Azure portal I went to &lt;code&gt;Add&lt;/code&gt; &amp;#8594; &lt;code&gt;Team projects&lt;/code&gt;
and linked to the VSTS team that contains the project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I then setup a web app - just a very basic config using the free tier.
After creating a Web App in the Azure portal, I went into the App&amp;#8217;s blade and selected the
&quot;Continuous Delivery&quot; menu option. It&amp;#8217;s pretty straight-forward to point the Web App to the
VSTS project and Azure sets up the initial CI/CD pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_ci&quot;&gt;CI&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The screenshot below demonstrates what gets created in the VSTS project&amp;#8217;s &lt;code&gt;Build&lt;/code&gt; configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/azure_ci/builditems.png&quot; alt=&quot;Build Items&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. The CI Build Items&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I disabled the &lt;code&gt;Test&lt;/code&gt; stage as I won&amp;#8217;t create tests for this demonstration.
You can see that the CI side is just doing the basic Build, Test, Publish routine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The publish step is useful to display as it shows how the &lt;code&gt;configuration&lt;/code&gt; and &lt;code&gt;output&lt;/code&gt;
parameters are set:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/azure_ci/cibuild.png&quot; alt=&quot;The CI Pipeline&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. The CI Pipeline&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I made a minor change to the Publish Artifact step as I wanted the build artifact name to
include the Git check-in version:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/azure_ci/cipublish.png&quot; alt=&quot;The CI Publish step&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 3. The CI Publish step&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Only the 1 CI workflow is required for this demonstration.
I want to build the code and package it for deployment over the various environments.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_cd&quot;&gt;CD&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Over in the VSTS project&amp;#8217;s &lt;code&gt;Releases&lt;/code&gt; section you&amp;#8217;ll find that the CD pipeline has also been configured.
I expanded on what Azure configured for me by creating an additional environment (&lt;code&gt;Test&lt;/code&gt;).
Each of the Environments (&lt;code&gt;Test&lt;/code&gt; &amp;amp; &lt;code&gt;Production&lt;/code&gt;) point to their own Web App instance:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/azure_ci/cdpipeline.png&quot; alt=&quot;The CD Pipeline&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 4. The CD Pipeline&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The screenshot above indicates a few things:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Each Environment has a single task (to deploy to the Web App instance)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;Test&lt;/code&gt; environment doesn&amp;#8217;t need manual approval but &lt;code&gt;Production&lt;/code&gt; does - check the person icon&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;VSTS Releases are broken up by environment, phase and task:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;An environment is essentially a release endpoint, such as a web app instance (or slot)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each environment has one or more phases that provide runtime environments for carrying out tasks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each phase has one or more tasks that define a work item to be completed&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I admit it&amp;#8217;s a little confusing but, for this demo, we keep it simple and have a single phase
with a single task for each environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;Triggers&lt;/code&gt; configuration for the release gives us the bridge between the CI and CD worlds.
You can see in the screenshot below that the release will run each time CI produces a new artifact:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/azure_ci/cdreleasedefinition.png&quot; alt=&quot;CD Release Trigger&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 5. CD Release Trigger&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;_test_environment&quot;&gt;Test environment&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Checking out the configuration for the Test environment, you can see that there&amp;#8217;s no approval required to deploy to &lt;code&gt;Test&lt;/code&gt; - we just let it happen once CI has done its thing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/azure_ci/cdtestapprove.png&quot; alt=&quot;CD Testing approval&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 6. CD Testing approval&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;Test&lt;/code&gt; environment also has some configuration to handle queues -
this is handy as I&amp;#8217;m only using a single test endpoint and want to roll-up multiple changes
if they start backing up:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/azure_ci/cdtestconditions.png&quot; alt=&quot;CD Testing conditions&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 7. CD Testing conditions&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;Test&lt;/code&gt; environment has one task, &lt;code&gt;Deploy Azure Service&lt;/code&gt;.
This is configured to deploy the new artifact to the relevant App Service.
One important item to note is that I&amp;#8217;ve selected &quot;Take App Offline&quot; -
this is important as it avoids problems wrt replacing the running codebase with the new one:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/azure_ci/cdtestdeploy.png&quot; alt=&quot;CD Testing app service task&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 8. CD Testing app service task&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;_production_environment&quot;&gt;Production environment&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;Production&lt;/code&gt; environment isn&amp;#8217;t hugely different to &lt;code&gt;Test&lt;/code&gt;.
Essentially, we want an automatic deploy into &lt;code&gt;Test&lt;/code&gt; but only deploy to &lt;code&gt;Production&lt;/code&gt;
following a manual approval gate (maybe there&amp;#8217;s a QA person):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/azure_ci/cdprodapprove.png&quot; alt=&quot;CD Production approval&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 9. CD Production approval&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;Production&lt;/code&gt; deployment is set to go ahead as long as &lt;code&gt;Test&lt;/code&gt; was successfully deployed
(and pending approval):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/azure_ci/cdprodconditions.png&quot; alt=&quot;CD Production conditions&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 10. CD Production conditions&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_approvals&quot;&gt;Approvals&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Just a quick note about approvals. When &lt;code&gt;Test&lt;/code&gt; has deployed successfully,
the approver for &lt;code&gt;Production&lt;/code&gt; receives an email similar to the one below:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/azure_ci/approvalemail.png&quot; alt=&quot;Approval email&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 11. Approval email&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Clicking on the approval link will take them to the VSTS site and ask them to either
Approve or Reject (and provide comments):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/img/azure_ci/approvaldialog.png&quot; alt=&quot;Approval dialog&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 12. Approval dialog&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Whilst this is a very simple application and CI/CD pipeline,
it should serve as a basis for more advanced iterations.
There are a number of items not covered that you should consider:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Automated testing: unit, UI, integration, load, security tests can all run from the CI/CD pipeline&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Operational concerns: how are system/application logs managed and alerts configured?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Related services: this demo is self-contained but how would we manage resources such as databases and changes to their schemas (for example)?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_references&quot;&gt;References&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.visualstudio.com/en-us/docs/build/get-started/aspnet-4-ci-cd-azure-automatic&quot;&gt;Use Azure to automatically generate a CI/CD pipeline to deploy an ASP.NET app&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.visualstudio.com/en-us/docs/build/concepts/definitions/release/environments&quot;&gt;Environments in Release Management&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/publishing/vsts-continuous-deployment&quot;&gt;Continuous deployment to Azure for ASP.NET Core, with VSTS&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://shellmonger.com/2017/02/16/running-asp-net-core-applications-in-azure-app-service/&quot;&gt;RUNNING ASP.NET CORE APPLICATIONS IN AZURE APP SERVICE&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>AWS CIS Audit tool</title>
      <link>https://dedickinson.github.io//blog/2017/AwsCisAudit.html</link>
      <pubDate>Thu, 6 Jul 2017 00:00:00 +1000</pubDate>
      <guid isPermaLink="false">blog/2017/AwsCisAudit.html</guid>
      <description>
      &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Center for Internet Security (CIS) released
&lt;a href=&quot;https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf&quot;&gt;guidelines for AWS&lt;/a&gt; and I
thought it&amp;#8217;d be interesting to describe these in &lt;a href=&quot;https://github.com/cucumber/cucumber/wiki/Gherkin&quot;&gt;Gherkin&lt;/a&gt;.
I could then back the statements with small Python scripts to run the checks through the use of the
the &lt;a href=&quot;https://pythonhosted.org/behave/&quot;&gt;Behave package&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see in the example feature below, the Gherkin syntax is reasonably readable:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-gherkin&quot; data-lang=&quot;gherkin&quot;&gt;@kms
Feature: AWS Key Management Services

  @cis @level_2
  Scenario: CIS 2.8 Ensure rotation for customer created CMKs is enabled
    Then all KMS keys must be set to rotate annually&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The statements then map to Python functions that do the actual work. Calling &lt;code&gt;behave&lt;/code&gt; against the
set of tests generates JUnit-based XML output so I then pass them through &lt;a href=&quot;https://github.com/inorton/junit2html&quot;&gt;junit2html&lt;/a&gt;
for easier reviews.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Overall it&amp;#8217;s an interesting approach and gives you a user-friendly description of the tests and
output that could be analysed by non-developers. Better yet, failed tests could raise an alarm.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A good chunk of the tests work but it&amp;#8217;s definitely not finished.
&lt;a href=&quot;https://bitbucket.org/duncan_dickinson/aws-cis-audit&quot;&gt;Check out the code&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>AWS Cache and reporting demo</title>
      <link>https://dedickinson.github.io//blog/2017/AwsCache.html</link>
      <pubDate>Tue, 4 Jul 2017 00:00:00 +1000</pubDate>
      <guid isPermaLink="false">blog/2017/AwsCache.html</guid>
      <description>
      &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Calling the AWS API using the &lt;a href=&quot;https://boto3.readthedocs.io/en/latest/&quot;&gt;Boto3&lt;/a&gt; package for Python
is straight forward but it can be useful to have a cache of the responses. These two projects
created an initial caching tool and an associated report generator.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Whilst the AWS Console is reasonably user-friendly, it can be difficult to paint a full picture
of your AWS environment. This set of work sought to generate useful reports for readers such as
netowrk and security folks. The goal was to produce summary information regarding key AWS-based
resources and even (gulp) network diagrams.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Two repositories make up the resulting codebase:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;a href=&quot;https://bitbucket.org/duncan_dickinson/awscache&quot;&gt;AWS Cache&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;A Python package that calls the AWS API (through Boto3) and stores the results in an SQLite
database. The system uses the &lt;a href=&quot;http://www.sqlalchemy.org&quot;&gt;SQLAlchemy&lt;/a&gt; toolkit to store the data
and manage relationships. This work also gave me the opportunity to create my first Python
wheel.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;&lt;a href=&quot;https://bitbucket.org/duncan_dickinson/awsreporter&quot;&gt;AWS Reporter&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;A sample script that uses the AWS Cache to generate reports on an AWS account.
The script calls AWS Cache to build the cache then processes a set of Jinja 2 templates
to produce a set of &lt;a href=&quot;http://asciidoctor.org&quot;&gt;Asciidoctor&lt;/a&gt; documents. These are then easily
transformed to HTML via a docker-based command.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Just running the &lt;code&gt;awscache&lt;/code&gt; command (made available via the AWS Cache package) with the right
credentials will generate an SQLite database with details of your key AWS resources - such as
IAM users/groups, KMS keys, Cloud Formation stacks, and Network topology (VPCs, VPNs, subnets etc).
You can then use this database file in various reporting/querying tools.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The AWS Reporter project utilises the cache to generate HTML-based reports. After a fair bit
of effort I even managed to generate a diagram for each VPC that illustrates the various subnets,
route tables, gateways and their relationships.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unfortunately I can&amp;#8217;t give you sample outputs - best not to reveal too much about the AWS
environment.&lt;/p&gt;
&lt;/div&gt;
	  </description>
    </item>
    
    <item>
      <title>cx_Oracle with AWS Lambda</title>
      <link>https://dedickinson.github.io//blog/2017/LambdacxOracle.html</link>
      <pubDate>Thu, 22 Jun 2017 00:00:00 +1000</pubDate>
      <guid isPermaLink="false">blog/2017/LambdacxOracle.html</guid>
      <description>
      &lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This work was part of a demonstration to a development team regarding the use of AWS for
web-based applications. I was demonstrating a few approaches:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Using a Lift &amp;amp; Shift approach that replicated the Oracle Database + PHP web app environment:&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;Input data (CSV) sent to S3 via a nightly upload&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change to the S3 bucket triggers a Lambda to update the RDS-based Database&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PHP application largely the same but with alterations that made it more self-contained&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Going &quot;serverless&quot; by:&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;Input data (CSV) sent to S3 via a nightly upload&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change to the S3 bucket triggers a Lambda that performs an ETL process to generate a set of
static &lt;a href=&quot;http://jsonapi.org&quot;&gt;JSON API&lt;/a&gt; files to be stored in another S3 bucket&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An API Gateway then maps an API to the underlying S3-based JSON API data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Two web apps were then developed by the dev team: a PHP that used the API and a JavaScript-based
app that ran client-side.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to achieve item 1.b we needed to setup a Python 2 Lambda that can connect to the
Oracle database. Support for this is via the &lt;a href=&quot;https://oracle.github.io/python-cx_Oracle/&quot;&gt;cx_Oracle&lt;/a&gt;
module but it requires more than a &lt;code&gt;pip install&lt;/code&gt; as the module expects access to the Oracle client.
You can see what happens by running up a container (&lt;code&gt;docker run --rm -ti python:3 /bin/bash&lt;/code&gt;)
and trying out the module:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;root@6bba52c06926:/# python -m pip install cx_Oracle --pre
Collecting cx_Oracle
  Downloading cx_Oracle-6.0rc1-cp36-cp36m-manylinux1_x86_64.whl (487kB)
    100% |████████████████████████████████| 491kB 2.0MB/s
Installing collected packages: cx-Oracle
Successfully installed cx-Oracle-6.0rc1
root@6bba52c06926:/# python
Python 3.6.1 (default, May 11 2017, 22:14:44)
[GCC 4.9.2] on linux
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&amp;gt;&amp;gt;&amp;gt; import cx_Oracle
Traceback (most recent call last):
  File &quot;&amp;lt;stdin&amp;gt;&quot;, line 1, in &amp;lt;module&amp;gt;
cx_Oracle.DatabaseError: DPI-1047: Oracle Client library cannot be loaded: libclntsh.so: cannot open shared object file: No such file or directory. See https://oracle.github.io/odpi/doc/installation.html for help&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have a few images with cx_Oracle running but needed to package up a distributable that can go
to Lambda. As you&amp;#8217;ll see in the &lt;a href=&quot;https://bitbucket.org/duncan_dickinson/lambda-cx_oracle-public&quot;&gt;Bitbucket repo&amp;#8217;s Readme&lt;/a&gt;,
I ended up with the following process:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Create a container image (based on &lt;code&gt;amazonlinux&lt;/code&gt;) that:&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;Provides the requisite software and configuration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Packages up the required shared libraries (&lt;em&gt;after a lot of web searching and testing&lt;/em&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run up an instance of the image and copy out the package&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a Lambda with:&lt;/p&gt;
&lt;div class=&quot;olist loweralpha&quot;&gt;
&lt;ol class=&quot;loweralpha&quot; type=&quot;a&quot;&gt;
&lt;li&gt;
&lt;p&gt;The package as the Lambda source&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The correct envrionment variables for accessing the shared libraries&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The end product is a repeatable deployment process - we just needed to provide the Python script
to read from S3 into the Oracle RDS DB.&lt;/p&gt;
&lt;/div&gt;
	  </description>
    </item>
    

  </channel>
</rss>
